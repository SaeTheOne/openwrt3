name: ImmortalWRT Build (Docker 纯净环境)

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  ALL_THREADS: 2
  # Docker 镜像：选择官方 Ubuntu 22.04，确保环境纯净
  DOCKER_IMAGE: ubuntu:22.04

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 检查磁盘初始空间
        run: |
          echo "=== 宿主机初始磁盘状态 ==="
          df -h
          echo "=== /mnt 分区空间（用于挂载编译目录）==="
          df -h /mnt

      - name: 准备宿主机编译目录（挂载到 Docker）
        run: |
          # 在宿主机 /mnt 下创建目录（利用大空间）
          sudo mkdir -p /mnt/openwrt-build
          sudo chown -R runner:runner /mnt/openwrt-build
          # 复制自定义文件到宿主机目录（供 Docker 内部使用）
          [ -e $FEEDS_CONF ] && cp $FEEDS_CONF /mnt/openwrt-build/
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE /mnt/openwrt-build/
          [ -e $DIY_P1_SH ] && cp $DIY_P1_SH /mnt/openwrt-build/ && chmod +x /mnt/openwrt-build/$DIY_P1_SH
          [ -e $DIY_P2_SH ] && cp $DIY_P2_SH /mnt/openwrt-build/ && chmod +x /mnt/openwrt-build/$DIY_P2_SH

      - name: 启动 Docker 容器（纯净环境编译）
        run: |
          # 启动 Docker，将宿主机 /mnt/openwrt-build 挂载到容器内 /build
          docker run -d \
            --name openwrt-builder \
            --volume /mnt/openwrt-build:/build \
            --env TZ=$TZ \
            --env ALL_THREADS=$ALL_THREADS \
            --env REPO_URL=$REPO_URL \
            --env REPO_BRANCH=$REPO_BRANCH \
            $DOCKER_IMAGE sleep infinity

          # 进入 Docker 容器，执行完整编译流程（一键脚本）
          docker exec openwrt-builder bash -c "
            # 1. 容器内初始化（更新源+安装依赖，纯净环境无冲突）
            apt-get update -y && \
            apt-get install -y tzdata && \
            ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime && echo \$TZ > /etc/timezone && \
            apt-get install -y \
              build-essential flex bison g++ gawk git libncurses5-dev libssl-dev \
              python3 python3-pip python3-setuptools python3-apt rsync unzip zlib1g-dev file wget && \
            apt-get clean && \
            echo '=== 容器内依赖安装完成，工具验证 ===' && \
            command -v gcc && command -v make && command -v python3 && \
            
            # 2. 克隆源码到容器内 /build 目录（实际对应宿主机 /mnt）
            cd /build && \
            git clone --depth 1 \$REPO_URL -b \$REPO_BRANCH openwrt || git clone \$REPO_URL -b \$REPO_BRANCH openwrt && \
            cd openwrt && git pull && \
            
            # 3. 加载自定义配置（从宿主机复制过来的文件）
            [ -f /build/$FEEDS_CONF ] && mv /build/$FEEDS_CONF feeds.conf.default || true && \
            [ -f /build/$CONFIG_FILE ] && mv /build/$CONFIG_FILE .config || true && \
            
            # 4. 执行自定义脚本
            [ -f /build/$DIY_P1_SH ] && /build/$DIY_P1_SH || true && \
            
            # 5. 更新 feeds 并下载包
            ./scripts/feeds update -a && ./scripts/feeds install -a && \
            [ -f /build/$DIY_P2_SH ] && /build/$DIY_P2_SH || true && \
            make defconfig && \
            make download -j\$ALL_THREADS && \
            find dl -size -1024c -exec rm -f {} \; && \
            echo '=== 下载包完成，开始编译 ===' && \
            
            # 6. 编译（多线程失败则单线程）
            make -j\$ALL_THREADS || make -j1 || make -j1 V=s && \
            echo '=== 编译完成，整理输出文件 ===' && \
            
            # 7. 复制固件到宿主机挂载目录（供后续上传）
            cd bin/targets/*/* && \
            rm -rf packages && \
            cp -r * /build/firmware-output/ && \
            echo '=== 固件已复制到宿主机 /mnt/openwrt-build/firmware-output ==='
          "

      - name: 上传固件到工件（从宿主机目录读取）
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@main
        with:
          name: ImmortalWRT-Firmware
          path: /mnt/openwrt-build/firmware-output/*
          retention-days: 7

      - name: 上传固件到 Release
        uses: softprops/action-gh-release@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: /mnt/openwrt-build/firmware-output/*
          name: Build ${{ env.REPO_BRANCH }} @ ${{ github.sha }}
          body: |
            ## 自动构建固件（Docker 纯净环境）
            - 源码分支：${{ env.REPO_BRANCH }}
            - 源码 Commit：${{ github.sha }}
            - 构建环境：Ubuntu 22.04 (Docker)
          draft: false
          prerelease: false

      - name: 清理环境
        if: always()
        run: |
          # 停止并删除 Docker 容器
          docker stop openwrt-builder || true
          docker rm openwrt-builder || true
          # 清理宿主机编译目录
          sudo rm -rf /mnt/openwrt-build
          echo "=== 清理完成 ==="
