name: immortalwrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: immortalwrt.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEVICE_MODEL: S905D
  PACKAGE_OUTPUT_PATH: ${{ github.workspace }}/flippy_output

jobs:
  build:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理冗余文件释放磁盘空间
      run: |
        # 删除 Ubuntu 预装的大体积无用软件
        sudo rm -rf /usr/share/dotnet          # 移除 .NET（约 6GB）
        sudo rm -rf /var/lib/docker            # 移除 Docker（约 8GB）
        sudo rm -rf /opt/ghc                   # 移除 GHC（约 2GB）
        sudo rm -rf /usr/local/share/boost     # 移除 Boost（约 1GB）
        sudo rm -rf /usr/lib/jvm               # 移除 JVM（约 2GB）
        # 清理 apt 缓存和临时文件
        sudo apt clean
        sudo rm -rf /var/cache/apt/archives/*
        # 查看清理后的剩余空间（方便调试，可保留）
        df -h
          
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "CONFIG_TARGET_armvirt=y" >> .config
        echo "CONFIG_TARGET_armvirt_64=y" >> .config
        echo "CONFIG_TARGET_armvirt_64_DEVICE_generic=y" >> .config

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo "使用单线程详细模式编译"
        # 修改为单线程编译并输出详细日志
        make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Clean up temporary files after compilation
      run: |
        cd openwrt
        # 删除编译过程中生成的中间目标文件（约 5-10GB）
        make clean
        # 删除下载的源码包缓存（可选，若后续需重新编译可保留）
        # rm -rf dl/
        df -h
    
    - name: Flippy打包（适配immoralwrt文件名）
      id: flippy_pack
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMSR: openwrt/bin/targets/*/*/*immortalwrt*rootfs.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_VERSION_NAME: 6.1.y_6.12.y
        OUTPUT_PATH: ${{ env.PACKAGE_OUTPUT_PATH }}
        EXTRA_ARGS: --with-dtb=meson-gxl-s905d-p230.dtb,meson-gxl-s905d-p241.dtb
          
    - name: 检查Flippy打包结果
      run: |
        echo "查看打包输出目录内容："
        ls -l ${{ env.PACKAGE_OUTPUT_PATH }}
        if [ -z "$(ls -A ${{ env.PACKAGE_OUTPUT_PATH }} 2>/dev/null)" ]; then
          echo "Flippy打包失败，输出目录为空"
          exit 1
        fi
        
    - name: 上传Flippy打包文件到Artifact
      uses: actions/upload-artifact@main
      if: steps.flippy_pack.outputs.status == 'success' && !cancelled()
      with:
        name: Flippy_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.PACKAGE_OUTPUT_PATH }}/*

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "📦 Flippy打包固件（immoralwrt）" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传Flippy打包文件到发布版本
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.PACKAGE_OUTPUT_PATH }}/*

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 删除工作流运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 移除旧的发布版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
