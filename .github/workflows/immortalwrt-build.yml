name: ImmortalWRT Build (Docker 分步调试版)

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  ALL_THREADS: 2
  DOCKER_IMAGE: ubuntu:22.04

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: 1. 检查宿主机基础信息
        run: |
          echo "=== 宿主机系统信息 ==="
          cat /etc/os-release
          echo "=== 宿主机 Docker 状态 ==="
          docker --version
          echo "=== 宿主机 /mnt 空间 ==="
          df -h /mnt
          # 确保 Docker 服务正常
          sudo systemctl restart docker && docker info

      - name: 2. 准备宿主机编译目录
        run: |
          # 创建目录并赋权（避免权限问题）
          sudo mkdir -p /mnt/openwrt-build
          sudo chown -R runner:runner /mnt/openwrt-build
          sudo chmod -R 755 /mnt/openwrt-build
          
          # 复制自定义文件（增加存在性判断，避免文件不存在导致报错）
          echo "=== 复制自定义文件到 /mnt ==="
          if [ -f "$FEEDS_CONF" ]; then
            cp $FEEDS_CONF /mnt/openwrt-build/ && echo "✅ 复制 $FEEDS_CONF 成功"
          else
            echo "⚠️ $FEEDS_CONF 不存在，跳过复制"
          fi
          
          if [ -f "$CONFIG_FILE" ]; then
            cp $CONFIG_FILE /mnt/openwrt-build/ && echo "✅ 复制 $CONFIG_FILE 成功"
          else
            echo "⚠️ $CONFIG_FILE 不存在，跳过复制"
          fi
          
          if [ -f "$DIY_P1_SH" ]; then
            cp $DIY_P1_SH /mnt/openwrt-build/ && chmod +x /mnt/openwrt-build/$DIY_P1_SH && echo "✅ 复制 $DIY_P1_SH 成功"
          else
            echo "⚠️ $DIY_P1_SH 不存在，跳过复制"
          fi
          
          if [ -f "$DIY_P2_SH" ]; then
            cp $DIY_P2_SH /mnt/openwrt-build/ && chmod +x /mnt/openwrt-build/$DIY_P2_SH && echo "✅ 复制 $DIY_P2_SH 成功"
          else
            echo "⚠️ $DIY_P2_SH 不存在，跳过复制"
          fi
          
          # 查看复制结果
          echo "=== /mnt/openwrt-build 目录内容 ==="
          ls -la /mnt/openwrt-build/

      - name: 3. 启动 Docker 容器（单独步骤，便于定位启动错误）
        run: |
          echo "=== 拉取 Docker 镜像 ==="
          docker pull $DOCKER_IMAGE
          
          echo "=== 启动 Docker 容器 ==="
          docker run -d \
            --name openwrt-builder \
            --volume /mnt/openwrt-build:/build \
            --env TZ=$TZ \
            --env ALL_THREADS=$ALL_THREADS \
            --env REPO_URL=$REPO_URL \
            --env REPO_BRANCH=$REPO_BRANCH \
            $DOCKER_IMAGE sleep infinity
          
          # 验证容器是否启动成功
          if docker ps | grep -q "openwrt-builder"; then
            echo "✅ Docker 容器启动成功"
            docker inspect openwrt-builder | grep "Mounts" -A 20  # 查看挂载是否正常
          else
            echo "❌ Docker 容器启动失败，查看日志："
            docker logs openwrt-builder
            exit 1  # 启动失败则终止流程
          fi

      - name: 4. Docker 内初始化环境（分步执行，每步打印日志）
        run: |
          # 4.1 安装时区工具（避免交互弹窗）
          echo "=== 4.1 安装时区工具 ==="
          docker exec openwrt-builder bash -c "
            apt-get update -y && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata && \
            ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime && echo \$TZ > /etc/timezone && \
            echo '✅ 时区配置完成'
          " || { echo "❌ 4.1 步骤失败"; exit 1; }

          # 4.2 安装编译依赖（分阶段，避免一次性安装冲突）
          echo "=== 4.2 安装编译依赖 ==="
          docker exec openwrt-builder bash -c "
            # 基础工具
            apt-get install -y build-essential flex bison g++ gawk gcc && \
            # 库文件
            apt-get install -y libncurses5-dev libssl-dev zlib1g-dev && \
            # 辅助工具
            apt-get install -y git python3 python3-pip python3-setuptools python3-apt rsync unzip file wget && \
            # 清理缓存
            apt-get clean && \
            # 验证工具
            command -v gcc && echo '✅ gcc 正常' || { echo '❌ gcc 缺失'; exit 1; } && \
            command -v make && echo '✅ make 正常' || { echo '❌ make 缺失'; exit 1; } && \
            command -v python3 && echo '✅ python3 正常' || { echo '❌ python3 缺失'; exit 1; }
          " || { echo "❌ 4.2 步骤失败"; exit 1; }

      - name: 5. Docker 内克隆源码
        run: |
          echo "=== 5. 克隆 ImmortalWRT 源码 ==="
          docker exec openwrt-builder bash -c "
            cd /build && \
            echo '当前目录：'`pwd` && \
            # 克隆（增加深度1加快速度，失败则全量克隆）
            if ! git clone --depth 1 \$REPO_URL -b \$REPO_BRANCH openwrt; then
              echo '⚠️ 浅克隆失败，尝试全量克隆'
              git clone \$REPO_URL -b \$REPO_BRANCH openwrt
            fi && \
            cd openwrt && git pull && \
            echo '✅ 源码克隆完成，目录大小：'`du -sh .`
          " || { echo "❌ 5 步骤失败"; exit 1; }

      - name: 6. Docker 内执行编译流程
        run: |
          echo "=== 6.1 加载自定义配置 ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            # 加载 feeds 配置
            if [ -f /build/$FEEDS_CONF ]; then
              mv /build/$FEEDS_CONF feeds.conf.default && echo '✅ 加载 $FEEDS_CONF 成功'
            else
              echo '⚠️ /build/$FEEDS_CONF 不存在，使用默认配置'
            fi && \
            # 加载 .config
            if [ -f /build/$CONFIG_FILE ]; then
              mv /build/$CONFIG_FILE .config && echo '✅ 加载 $CONFIG_FILE 成功'
            else
              echo '⚠️ /build/$CONFIG_FILE 不存在，后续需手动配置'
            fi
          " || { echo "❌ 6.1 步骤失败"; exit 1; }

          echo "=== 6.2 执行自定义脚本 1 ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            if [ -f /build/$DIY_P1_SH ]; then
              /build/$DIY_P1_SH && echo '✅ 执行 $DIY_P1_SH 成功'
            else
              echo '⚠️ /build/$DIY_P1_SH 不存在，跳过'
            fi
          " || { echo "❌ 6.2 步骤失败（脚本可能有错误）"; exit 1; }

          echo "=== 6.3 更新 feeds ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            ./scripts/feeds update -a && echo '✅ feeds update 成功' && \
            ./scripts/feeds install -a && echo '✅ feeds install 成功'
          " || { echo "❌ 6.3 步骤失败"; exit 1; }

          echo "=== 6.4 执行自定义脚本 2 ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            if [ -f /build/$DIY_P2_SH ]; then
              /build/$DIY_P2_SH && echo '✅ 执行 $DIY_P2_SH 成功'
            else
              echo '⚠️ /build/$DIY_P2_SH 不存在，跳过'
            fi
          " || { echo "❌ 6.4 步骤失败（脚本可能有错误）"; exit 1; }

          echo "=== 6.5 下载软件包 ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            make defconfig && echo '✅ defconfig 成功' && \
            make download -j\$ALL_THREADS && echo '✅ 下载包成功' && \
            find dl -size -1024c -exec rm -f {} \; && echo '✅ 清理无效包成功'
          " || { echo "❌ 6.5 步骤失败"; exit 1; }

          echo "=== 6.6 开始编译 ==="
          docker exec openwrt-builder bash -c "
            cd /build/openwrt && \
            echo '使用线程数：'$ALL_THREADS && \
            make -j\$ALL_THREADS || make -j1 || make -j1 V=s && \
            echo '✅ 编译完成'
          " || { echo "❌ 6.6 步骤失败（编译出错）"; exit 1; }

      - name: 7. 整理并上传固件
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          # 复制固件到宿主机挂载目录（便于上传）
          docker exec openwrt-builder bash -c "
            cd /build/openwrt/bin/targets/*/* && \
            rm -rf packages && \
            mkdir -p /build/firmware-output && \
            cp -r * /build/firmware-output/ && \
            echo '=== 固件列表 ===' && ls -lh /build/firmware-output/
          "

          # 上传到 GitHub Artifacts
          echo "=== 上传固件 ==="
          if [ -d "/mnt/openwrt-build/firmware-output" ]; then
            uses: actions/upload-artifact@main
            with:
              name: ImmortalWRT-Firmware
              path: /mnt/openwrt-build/firmware-output/*
              retention-days: 7
            echo "✅ 固件上传成功"
          else
            echo "❌ 固件目录不存在，上传失败"
            exit 1
          fi

      - name: 8. 清理环境
        if: always()
        run: |
          echo "=== 清理 Docker 容器 ==="
          docker stop openwrt-builder || true
          docker rm openwrt-builder || true
          docker system prune -af || true
          echo "=== 清理宿主机目录 ==="
          sudo rm -rf /mnt/openwrt-build || true
          echo "✅ 清理完成"
