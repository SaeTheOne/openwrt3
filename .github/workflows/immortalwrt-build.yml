name: ImmortalWRT Build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  ALL_THREADS: 2

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 检查磁盘初始空间
        run: |
          echo "=== 初始磁盘空间状态 ==="
          df -h
          echo "========================"
          df -h /mnt

      - name: 初始化环境（适配最新Ubuntu包）
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 1. 先更新软件源（关键：确保能找到最新包）
          sudo apt-get -qq update
          
          # 2. 清理根分区冗余文件
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*
          sudo rm -rf /usr/local/share/powershell /usr/share/swift /usr/lib/jvm /usr/lib/mono
          
          # 3. 重新更新源（清理后需重新加载）
          sudo apt-get -qq update
          
          # 4. 安装依赖：删除Ubuntu 22.04+中不存在的包，补充替代包
          sudo apt-get -qq install -y \
            build-essential flex bison g++ gawk \
            git libncurses5-dev libssl-dev \
            python3 python3-pip python3-setuptools \
            rsync unzip zlib1g-dev file wget \
            python3-apt  # 替代python3-distutils（功能兼容）
          
          # 5. 清理缓存
          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean
          
          # 显示清理后根分区空间
          echo "=== 清理后根分区空间 ==="
          df -h /

      - name: 准备大空间工作目录（/mnt）
        run: |
          # 创建/mnt下的工作目录并赋权
          sudo mkdir -p /mnt/workdir
          sudo chown -R runner:runner /mnt/workdir
          
          # 验证目录权限和分区空间
          echo "=== /mnt/workdir 目录信息 ==="
          ls -ld /mnt/workdir
          echo "=== /mnt/workdir 所在分区空间 ==="
          df -hT /mnt/workdir

      - name: 克隆源码
        working-directory: /mnt/workdir
        run: |
          echo "=== 当前克隆目录 ==="
          echo $PWD
          df -hT $PWD
          
          # 克隆源码
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          git pull
          
          # 创建软链接，确保后续步骤能访问源码
          ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
          # 验证软链接有效性
          echo "=== 软链接验证 ==="
          ls -l $GITHUB_WORKSPACE/openwrt
          echo "=== 源码目录结构 ==="
          ls -la $GITHUB_WORKSPACE/openwrt

      - name: 加载自定义配置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P1_SH $DIY_P2_SH
          cd openwrt
          ../$DIY_P1_SH

      - name: 更新 feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 应用自定义脚本
        run: |
          cd openwrt
          ../$DIY_P2_SH

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j$ALL_THREADS
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
          # 显示当前/mnt分区空间（确认下载包未占满空间）
          echo "=== 下载包后 /mnt 空间 ==="
          df -h /mnt

      - name: 多线程编译
        run: |
          cd openwrt
          echo "=== 开始编译，当前线程数：$ALL_THREADS ==="
          make -j$ALL_THREADS || make -j1 || make -j1 V=s
          
          # 编译完成后查看空间
          echo "=== 编译后 /mnt 空间 ==="
          df -h /mnt

      - name: 整理输出文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          echo "=== 输出文件列表 ==="
          ls -l

      - name: 上传固件到工件
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ImmortalWRT-Firmware
          path: ${{ env.FIRMWARE_DIR }}

      - name: 上传固件到 Release
        uses: softprops/action-gh-release@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.FIRMWARE_DIR }}/*
          name: Build ${{ env.REPO_BRANCH }} @ ${{ github.sha }}
          body: |
            ## 自动构建固件
            - 源码分支：${{ env.REPO_BRANCH }}
            - 源码 Commit：${{ github.sha }}
            - 构建时间：${{ env.BUILD_DATE }}
          draft: false
          prerelease: false

      - name: 清理编译目录
        if: always()
        run: |
          cd openwrt
          make clean
          echo "=== 清理后 /mnt 空间 ==="
          df -h /mnt
