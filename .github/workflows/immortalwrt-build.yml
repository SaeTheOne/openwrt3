    - name: 编译固件（含Rust修复：确保host目录生成）
      id: compile
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        # 1. 配置临时目录
        export TMPDIR=${{ env.TEMP_DIR }}/tmp
        mkdir -p $TMPDIR

        #######################################################################
        # 关键修复：先触发make生成host目录，再修改Rust配置
        #######################################################################
        echo "=== 第一步：触发make生成host目录（等待30秒） ==="
        # 执行make 30秒后中断（仅为生成host目录，不实际编译）
        make -j1 V=sc &  # 后台执行make
        MAKE_PID=$!      # 记录make进程ID
        sleep 30         # 等待30秒，确保host目录生成并解压Rust源码
        sudo kill $MAKE_PID  # 中断make进程
        wait $MAKE_PID 2>/dev/null  # 清理进程状态

        # 2. 此时host目录已生成，查找并修改Rust配置
        echo "=== 第二步：修改Rust config.toml ==="
        RUST_HOST_DIR="${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/host"
        if [ -d "$RUST_HOST_DIR" ]; then
          echo "=== 找到host目录：$RUST_HOST_DIR ==="
          # 通配符匹配Rust源码目录（适配任意版本）
          RUST_SRC_DIR=$(find "$RUST_HOST_DIR" -maxdepth 1 -type d -name "rustc-*.0-src" | head -n 1)
          if [ -n "$RUST_SRC_DIR" ]; then
            echo "=== 找到Rust源码：$RUST_SRC_DIR ==="
            cd "$RUST_SRC_DIR"
            # 修改config.toml（禁用download-ci-llvm）
            if grep -q "\[llvm\]" config.toml 2>/dev/null; then
              sed -i '/\[llvm\]/,/^$/s/^download-ci-llvm.*/download-ci-llvm = false/' config.toml
            else
              echo -e "\n[llvm]\ndownload-ci-llvm = false" >> config.toml
            fi
            # 验证配置
            echo "=== 验证配置结果 ==="
            grep -A 2 "\[llvm\]" config.toml
          else
            echo "=== 未找到Rust源码！打印host目录结构 ==="
            ls -l "$RUST_HOST_DIR"
            exit 1  # 若未找到Rust源码，终止流程（避免后续编译失败）
          fi
        else
          echo "=== host目录仍未生成！打印build_dir结构 ==="
          ls -l "${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/"
          exit 1  # 终止流程，避免无效编译
        fi

        #######################################################################
        # 3. 重新执行make，完成编译（此时Rust配置已修复）
        #######################################################################
        echo "=== 第三步：重新执行make，完成编译 ==="
        cd $GITHUB_WORKSPACE/openwrt
        make -j1 V=sc  # 单线程+详细日志，确保编译稳定

        # 4. 记录编译信息
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "=== 编译输出目录 ==="
        ls -l $GITHUB_WORKSPACE/openwrt/bin/targets/
