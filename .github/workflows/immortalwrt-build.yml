name: ImmortalWRT Build (修复 'file' 依赖)

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: immortalwrt.config  # 你的配置文件名
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  ALL_THREADS: 2
  DOCKER_IMAGE: ubuntu:22.04
  SOURCE_DIR: ./

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@main

      - name: 1. 确认文件存在
        run: |
          ls -la $SOURCE_DIR/
          [ -f "$SOURCE_DIR/$CONFIG_FILE" ] || { echo "❌ 缺少 $CONFIG_FILE"; exit 1; }
          [ -f "$SOURCE_DIR/$DIY_P1_SH" ] || { echo "❌ 缺少 $DIY_P1_SH"; exit 1; }

      - name: 2. 准备编译目录
        run: |
          sudo mkdir -p /mnt/openwrt-build
          sudo chown -R runner:runner /mnt/openwrt-build
          cp $SOURCE_DIR/$CONFIG_FILE $SOURCE_DIR/$DIY_P1_SH $SOURCE_DIR/$DIY_P2_SH /mnt/openwrt-build/
          chmod +x /mnt/openwrt-build/$DIY_P1_SH /mnt/openwrt-build/$DIY_P2_SH
          ls -la /mnt/openwrt-build/

      - name: 3. 启动 Docker 容器
        run: |
          docker pull $DOCKER_IMAGE
          docker run -d --name openwrt-builder -v /mnt/openwrt-build:/build $DOCKER_IMAGE sleep infinity
          docker ps | grep -q "openwrt-builder" || { echo "❌ 容器启动失败"; exit 1; }

      - name: 4. 安装依赖（强制安装 'file' 并验证）
        run: |
          docker exec openwrt-builder bash -c "
            apt-get update -y && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata && \
            # 单独强制安装 'file' 包，确保其被正确安装
            apt-get install -y --force-yes file && \
            # 安装其他依赖
            apt-get install -y build-essential flex bison g++ gawk gcc swig git \
              libncurses5-dev libssl-dev zlib1g-dev python3 python3-pip rsync unzip wget && \
            apt-get clean && \
            # 关键：验证 'file' 命令是否可用
            if ! command -v file &> /dev/null; then
              echo '❌ 仍然缺少 file 工具，安装失败' && exit 1
            else
              echo '✅ file 工具安装成功'
            fi
          " || { echo "❌ 依赖安装失败"; exit 1; }

      - name: 5. 克隆源码并编译
        run: |
          docker exec openwrt-builder bash -c "
            cd /build && \
            git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt && cd openwrt && \
            mv /build/$CONFIG_FILE .config && \
            /build/$DIY_P1_SH && \
            ./scripts/feeds update -a && ./scripts/feeds install -a && \
            /build/$DIY_P2_SH && \
            make defconfig && make download -j$ALL_THREADS && \
            make -j$ALL_THREADS || make -j1 V=s && \
            mkdir -p /build/firmware && cp bin/targets/*/*/*.tar.gz /build/firmware/
          " || { echo "❌ 编译失败"; exit 1; }

      - name: 6. 上传固件
        uses: actions/upload-artifact@main
        with:
          name: ImmortalWRT-Firmware
          path: /mnt/openwrt-build/firmware/*
          retention-days: 7

      - name: 7. 清理环境
        if: always()
        run: |
          docker stop openwrt-builder && docker rm openwrt-builder
          sudo rm -rf /mnt/openwrt-build
