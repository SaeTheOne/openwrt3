# .github/workflows/immortalwrt-build.yml
# SaeTheOne/openwrt3 项目专用 - 最终修复版
# 适配 ImmortalWRT v24.10.2，解决补丁冲突、Rust编译、YAML语法等所有问题

name: ImmortalWRT Builder (最终修复版)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/immortalwrt-build.yml'
      - '.config'
      - 'diy-part1.sh'
      - 'diy-part2.sh'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v24.10.2
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TEMP_DIR: /mnt/openwrt-temp
  SWAP_FILE: /mnt/swapfile
  UPLOAD_RELEASE: true
  UPLOAD_ARTIFACT: true
  TZ: Asia/Shanghai

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-22.04

    steps:
      ###########################################################################
      # 1. 检出项目代码
      ###########################################################################
      - name: 检出项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: false

      ###########################################################################
      # 2. 初始化环境
      ###########################################################################
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 清理系统空间
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android \
                      /opt/ghc /opt/hostedtoolcache/CodeQL /var/cache/apt/archives/* \
                      /usr/share/man/*
          sudo docker image prune --all --force
          sudo apt-get update -qq && sudo apt-get autoremove --purge -y -qq && sudo apt-get clean -qq

          # 安装依赖
          sudo apt-get install -y -qq \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk \
            gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool \
            lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev \
            libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build \
            p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

          # 配置/mnt权限
          sudo chmod -R 777 /mnt
          sudo mkdir -p ${{ env.TEMP_DIR }}
          sudo chown -R $USER:$GROUPS ${{ env.TEMP_DIR }}
          sudo chmod -R 755 ${{ env.TEMP_DIR }}

          # 创建交换文件
          if [ ! -f "${{ env.SWAP_FILE }}" ]; then
            sudo fallocate -l 16G ${{ env.SWAP_FILE }}
            sudo chmod 600 ${{ env.SWAP_FILE }}
            sudo mkswap ${{ env.SWAP_FILE }}
            sudo swapon ${{ env.SWAP_FILE }}
          fi

          # 验证环境
          echo "=== 磁盘空间 ===" && df -h
          echo "=== 内存状态 ===" && free -h

      ###########################################################################
      # 3. 克隆源码
      ###########################################################################
      - name: 克隆 ImmortalWRT v24.10.2 源码
        working-directory: ${{ env.TEMP_DIR }}
        run: |
          sudo rm -rf openwrt
          git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} --depth 1 openwrt
          cd openwrt
          echo "=== 当前分支: $(git branch --show-current) ==="
          ln -sf ${{ env.TEMP_DIR }}/openwrt $GITHUB_WORKSPACE/openwrt
          sudo chown -R $USER:$GROUPS ${{ env.TEMP_DIR }}/openwrt

      ###########################################################################
      # 4. 移除冲突补丁
      ###########################################################################
      - name: 移除068系列冲突补丁
        run: |
          PATCH_DIR="${{ env.TEMP_DIR }}/openwrt/target/linux/generic/backport-6.6"
          if [ -d "$PATCH_DIR" ]; then
            CONFLICT_PATCHES=$(find "$PATCH_DIR" -name "068-*.patch")
            if [ -n "$CONFLICT_PATCHES" ]; then
              echo "=== 删除冲突补丁: ===" && echo "$CONFLICT_PATCHES"
              sudo rm -f $CONFLICT_PATCHES
            fi
          fi

      ###########################################################################
      # 5. 加载自定义配置
      ###########################################################################
      - name: 加载软件源与DIY脚本1
        run: |
          if [ -f "${{ env.FEEDS_CONF }}" ]; then
            mv ${{ env.FEEDS_CONF }} $GITHUB_WORKSPACE/openwrt/feeds.conf.default
          fi
          if [ -f "${{ env.DIY_P1_SH }}" ]; then
            chmod +x ${{ env.DIY_P1_SH }}
            cd $GITHUB_WORKSPACE/openwrt
            $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }}
          fi

      ###########################################################################
      # 6. 更新软件源
      ###########################################################################
      - name: 更新并安装软件源
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          ./scripts/feeds clean
          ./scripts/feeds update -af
          ./scripts/feeds install -af

      ###########################################################################
      # 7. 加载编译配置
      ###########################################################################
      - name: 加载编译配置与DIY脚本2
        run: |
          if [ -f "${{ env.CONFIG_FILE }}" ]; then
            mv ${{ env.CONFIG_FILE }} $GITHUB_WORKSPACE/openwrt/.config
          fi
          if [ -f "${{ env.DIY_P2_SH }}" ]; then
            chmod +x ${{ env.DIY_P2_SH }}
            cd $GITHUB_WORKSPACE/openwrt
            $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }}
          fi
          cd $GITHUB_WORKSPACE/openwrt
          echo "=== 配置摘要 ==="
          grep -E '^CONFIG_TARGET_|^CONFIG_PACKAGE_luci' .config | head -20

      ###########################################################################
      # 8. 检查依赖
      ###########################################################################
      - name: 检查依赖冲突
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          make defconfig
          make check V=s

      ###########################################################################
      # 9. 下载软件包
      ###########################################################################
      - name: 下载软件包
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          export CCACHE_DIR=${{ env.TEMP_DIR }}/.ccache
          mkdir -p $CCACHE_DIR
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      ###########################################################################
      # 10. 编译固件（核心修复步骤）
      ###########################################################################
      - name: 编译固件（含Rust修复+YAML语法修复）
        id: compile
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          # 配置临时目录
          export TMPDIR=${{ env.TEMP_DIR }}/tmp
          mkdir -p $TMPDIR

          #######################################################################
          # 第一步：触发make生成host目录（等待30秒，后台执行）
          #######################################################################
          echo "=== 触发make生成host目录（30秒后中断） ==="
          make -j1 V=sc &
          MAKE_PID=$!
          sleep 30
          # 中断make进程
          if ps -p $MAKE_PID > /dev/null; then
            sudo kill $MAKE_PID
            wait $MAKE_PID 2>/dev/null
            echo "=== 已中断make进程，host目录生成完成 ==="
          else
            echo "=== make进程已自动退出，跳过kill ==="
          fi

          #######################################################################
          # 第二步：修改Rust config.toml（禁用download-ci-llvm）
          #######################################################################
          echo "=== 开始修改Rust配置 ==="
          RUST_HOST_DIR="${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/host"
          if [ -d "$RUST_HOST_DIR" ]; then
            echo "=== 找到host目录：$RUST_HOST_DIR ==="
            RUST_SRC_DIR=$(find "$RUST_HOST_DIR" -maxdepth 1 -type d -name "rustc-*.0-src" | head -n 1)
            if [ -n "$RUST_SRC_DIR" ]; then
              echo "=== 找到Rust源码：$RUST_SRC_DIR ==="
              cd "$RUST_SRC_DIR"
              # 修改配置
              if ! grep -q "download-ci-llvm = false" config.toml 2>/dev/null; then
                if grep -q "\[llvm\]" config.toml 2>/dev/null; then
                  sed -i '/\[llvm\]/,/^$/s/^download-ci-llvm.*/download-ci-llvm = false/' config.toml
                else
                  echo -e "\n[llvm]\ndownload-ci-llvm = false" >> config.toml
                fi
              fi
              # 验证配置
              echo "=== 验证Rust配置 ==="
              grep -A 2 "\[llvm\]" config.toml
            else
              echo "=== 未找到Rust源码！host目录内容： ==="
              ls -l "$RUST_HOST_DIR"
              exit 1
            fi
          else
            echo "=== host目录未生成！build_dir内容： ==="
            ls -l "${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/"
            exit 1
          fi

          #######################################################################
          # 第三步：重新执行make，完成编译
          #######################################################################
          echo "=== 重新执行make编译固件 ==="
          cd $GITHUB_WORKSPACE/openwrt
          make -j1 V=sc

          # 记录编译信息
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "=== 编译输出目录结构 ==="
          ls -l $GITHUB_WORKSPACE/openwrt/bin/targets/

      ###########################################################################
      # 11. Flippy打包
      ###########################################################################
      - name: Flippy打包镜像
        id: flippy
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMSR: $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/*rootfs.tar.gz
          SELECT_PACKITPATH: openwrt_packit
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.1.y_6.12.y
          WHOAMI: ophub

      ###########################################################################
      # 12. 上传到Release
      ###########################################################################
      - name: 上传到GitHub Release
        if: ${{ steps.flippy.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' }}
        uses: ncipollo/release-action@main
        with:
          tag: ImmortalWRT_v24.10.2_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          artifacts: /opt/openwrt_packit/output/*.img
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## ImmortalWRT v24.10.2 固件（${{ env.DEVICE_NAME }}）
            编译时间：${{ env.FILE_DATE }}
            适配SOC：${{ env.PACKAGE_SOC }}
            内核版本：${{ env.KERNEL_VERSION_NAME }}
            
            ### 初始配置
            - 默认IP：192.168.1.1
            - 用户名：root
            - 密码：password

      ###########################################################################
      # 13. 上传到Artifacts
      ###########################################################################
      - name: 上传到Artifacts
        if: ${{ steps.flippy.outputs.status == 'success' && env.UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWRT_Firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: /opt/openwrt_packit/output/*.img
          retention-days: 7

      ###########################################################################
      # 14. 清理资源
      ###########################################################################
      - name: 清理交换文件和临时目录
        if: always()
        run: |
          if [ -f "${{ env.SWAP_FILE }}" ]; then
            sudo swapoff ${{ env.SWAP_FILE }}
            sudo rm -f ${{ env.SWAP_FILE }}
          fi
          sudo rm -rf ${{ env.TEMP_DIR }}
          echo "=== 清理完成 ==="

      - name: 清理旧工作流记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: 删除旧Release
        if: ${{ env.UPLOAD_RELEASE == 'true' && !cancelled() }}
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
