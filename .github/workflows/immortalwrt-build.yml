# .github/workflows/immortalwrt-build.yml
# SaeTheOne/openwrt3 项目专用 - 整合所有修复（补丁冲突+Rust编译+权限配置）
# 适配 ImmortalWRT v24.10.2 稳定分支，目标设备 s905d

name: ImmortalWRT Builder (v24.10.2 - 修复版)

on:
  workflow_dispatch:  # 手动触发编译
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/immortalwrt-build.yml'
      - '.config'
      - 'diy-part1.sh'
      - 'diy-part2.sh'

env:
  # 项目核心配置（适配你的项目文件路径）
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v24.10.2  # 锁定稳定分支
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  # 存储与输出配置
  TEMP_DIR: /mnt/openwrt-temp  # /mnt分区临时目录（空间充足）
  SWAP_FILE: /mnt/swapfile     # 16G交换文件（避免内存不足）
  UPLOAD_RELEASE: true         # 上传到GitHub Release
  UPLOAD_ARTIFACT: true        # 上传到工作流Artifacts
  TZ: Asia/Shanghai            # 时区配置

jobs:
  build:
    permissions:
      contents: write  # 允许创建Release和标签
    runs-on: ubuntu-22.04  # 兼容最佳的系统版本

    steps:
      ###########################################################################
      # 1. 检出项目代码（包含你的.config和DIY脚本）
      ###########################################################################
      - name: 检出 SaeTheOne/openwrt3 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: false

      ###########################################################################
      # 2. 初始化环境（清理空间+安装依赖+配置/mnt权限+创建交换文件）
      ###########################################################################
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 深度清理系统空间
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android \
                      /opt/ghc /opt/hostedtoolcache/CodeQL /var/cache/apt/archives/* \
                      /usr/share/man/*
          sudo docker image prune --all --force
          sudo apt-get update -qq && sudo apt-get autoremove --purge -y -qq && sudo apt-get clean -qq

          # 安装 ImmortalWRT 官方依赖（避免工具缺失）
          sudo apt-get install -y -qq \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk \
            gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool \
            lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev libssl-dev \
            libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build \
            p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

          # 配置/mnt分区权限（确保可读写）
          sudo chmod -R 777 /mnt
          sudo mkdir -p ${{ env.TEMP_DIR }}
          sudo chown -R $USER:$GROUPS ${{ env.TEMP_DIR }}
          sudo chmod -R 755 ${{ env.TEMP_DIR }}

          # 创建16G交换文件（修复内存不足，权限600）
          if [ ! -f "${{ env.SWAP_FILE }}" ]; then
            sudo fallocate -l 16G ${{ env.SWAP_FILE }}
            sudo chmod 600 ${{ env.SWAP_FILE }}
            sudo mkswap ${{ env.SWAP_FILE }}
            sudo swapon ${{ env.SWAP_FILE }}
          fi

          # 验证环境状态
          echo "=== 磁盘空间 ===" && df -h
          echo "=== 内存/交换空间 ===" && free -h
          echo "=== /mnt挂载状态 ===" && mount | grep /mnt

      ###########################################################################
      # 3. 克隆 ImmortalWRT v24.10.2 源码（清理旧缓存）
      ###########################################################################
      - name: 克隆 v24.10.2 源码
        working-directory: ${{ env.TEMP_DIR }}
        run: |
          # 彻底删除旧源码（避免分支混乱）
          sudo rm -rf openwrt
          # 克隆稳定分支并验证
          git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} --depth 1 openwrt
          cd openwrt
          echo "=== 当前分支: $(git branch --show-current) ==="
          echo "=== 最新提交: $(git log -1 --pretty=format:%h-%s) ==="
          # 创建软链接到项目目录
          ln -sf ${{ env.TEMP_DIR }}/openwrt $GITHUB_WORKSPACE/openwrt
          # 修复源码权限
          sudo chown -R $USER:$GROUPS ${{ env.TEMP_DIR }}/openwrt

      ###########################################################################
      # 4. 删除冲突补丁（068系列，解决补丁应用失败）
      ###########################################################################
      - name: 移除068系列冲突补丁
        run: |
          PATCH_DIR="${{ env.TEMP_DIR }}/openwrt/target/linux/generic/backport-6.6"
          if [ -d "$PATCH_DIR" ]; then
            CONFLICT_PATCHES=$(find "$PATCH_DIR" -name "068-*.patch")
            if [ -n "$CONFLICT_PATCHES" ]; then
              echo "=== 删除冲突补丁: ===" && echo "$CONFLICT_PATCHES"
              sudo rm -f $CONFLICT_PATCHES
            else
              echo "=== 未发现068系列补丁 ==="
            fi
          else
            echo "=== 补丁目录不存在，跳过 ==="
          fi

      ###########################################################################
      # 5. 加载自定义配置（软件源+DIY脚本1）
      ###########################################################################
      - name: 加载软件源与DIY脚本1
        run: |
          # 替换软件源配置
          if [ -f "${{ env.FEEDS_CONF }}" ]; then
            mv ${{ env.FEEDS_CONF }} $GITHUB_WORKSPACE/openwrt/feeds.conf.default
          fi
          # 执行DIY脚本1（修改源/添加包）
          if [ -f "${{ env.DIY_P1_SH }}" ]; then
            chmod +x ${{ env.DIY_P1_SH }}
            cd $GITHUB_WORKSPACE/openwrt
            $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }}
          fi

      ###########################################################################
      # 6. 更新并安装软件源（清理缓存+强制更新）
      ###########################################################################
      - name: 更新软件源
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          ./scripts/feeds clean  # 清理旧缓存
          ./scripts/feeds update -af  # 全量更新
          ./scripts/feeds install -af  # 全量安装

      ###########################################################################
      # 7. 加载编译配置（.config+DIY脚本2）
      ###########################################################################
      - name: 加载编译配置与DIY脚本2
        run: |
          # 复制.config到源码目录
          if [ -f "${{ env.CONFIG_FILE }}" ]; then
            mv ${{ env.CONFIG_FILE }} $GITHUB_WORKSPACE/openwrt/.config
          fi
          # 执行DIY脚本2（修改配置/添加文件）
          if [ -f "${{ env.DIY_P2_SH }}" ]; then
            chmod +x ${{ env.DIY_P2_SH }}
            cd $GITHUB_WORKSPACE/openwrt
            $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }}
          fi
          # 验证配置
          cd $GITHUB_WORKSPACE/openwrt
          echo "=== 核心配置摘要 ==="
          grep -E '^CONFIG_TARGET_|^CONFIG_PACKAGE_luci' .config | head -20

      ###########################################################################
      # 8. 检查软件包依赖（提前发现冲突）
      ###########################################################################
      - name: 检查依赖冲突
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          make defconfig  # 生成默认配置
          make check V=s  # 详细检查依赖

      ###########################################################################
      # 9. 下载软件包到/mnt（避免重复下载）
      ###########################################################################
      - name: 下载软件包
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          # 配置编译缓存到/mnt
          export CCACHE_DIR=${{ env.TEMP_DIR }}/.ccache
          mkdir -p $CCACHE_DIR
          make defconfig
          # 多线程下载
          make download -j8
          # 清理无效小文件
          find dl -size -1024c -exec echo "删除无效文件: {}" \; -exec rm -f {} \;

      ###########################################################################
      # 10. 编译固件（整合Rust修复：禁用download-ci-llvm）
      ###########################################################################
      - name: 编译固件（含Rust修复）
        id: compile
        run: |
          cd $GITHUB_WORKSPACE/openwrt
          # 配置临时目录
          export TMPDIR=${{ env.TEMP_DIR }}/tmp
          mkdir -p $TMPDIR

          #######################################################################
          # 关键修复：修改Rust config.toml（禁用download-ci-llvm）
          #######################################################################
          echo "=== 修复Rust编译配置 ==="
          RUST_HOST_DIR="${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/host"
          sleep 5  # 等待host目录生成
          
          if [ -d "$RUST_HOST_DIR" ]; then
            # 通配符匹配Rust源码目录（适配任意版本）
            RUST_SRC_DIR=$(find "$RUST_HOST_DIR" -maxdepth 1 -type d -name "rustc-*.0-src" | head -n 1)
            if [ -n "$RUST_SRC_DIR" ]; then
              echo "=== 找到Rust源码: $RUST_SRC_DIR ==="
              cd "$RUST_SRC_DIR"
              # 修改或添加[llvm]配置
              if grep -q "\[llvm\]" config.toml 2>/dev/null; then
                sed -i '/\[llvm\]/,/^$/s/^download-ci-llvm.*/download-ci-llvm = false/' config.toml
              else
                echo -e "\n[llvm]\ndownload-ci-llvm = false" >> config.toml
              fi
              # 验证修复结果
              echo "=== Rust config.toml 验证 ==="
              grep -A 2 "\[llvm\]" config.toml
            else
              echo "=== 未找到Rust源码目录，跳过修复 ==="
              ls -l "$RUST_HOST_DIR"
            fi
          else
            echo "=== Rust host目录不存在，跳过修复 ==="
            ls -l "${{ env.TEMP_DIR }}/openwrt/build_dir/target-aarch64_generic_musl/"
          fi
          # 回到源码根目录
          cd $GITHUB_WORKSPACE/openwrt

          #######################################################################
          # 开始编译（单线程+详细日志）
          #######################################################################
          echo "=== CPU核心数: $(nproc) ==="
          echo "=== 开始编译固件 ==="
          make -j1 V=sc  # V=sc：输出完整日志，便于定位错误

          # 记录编译信息
          echo "status=success" >> $GITHUB_OUTPUT
          # 提取设备名称
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          # 记录编译时间
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          # 显示输出目录
          echo "=== 编译输出目录 ==="
          ls -l $GITHUB_WORKSPACE/openwrt/bin/targets/

      ###########################################################################
      # 11. Flippy打包（生成s905d设备镜像）
      ###########################################################################
      - name: Flippy打包镜像
        id: flippy
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMSR: $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/*rootfs.tar.gz
          SELECT_PACKITPATH: openwrt_packit
          PACKAGE_SOC: s905d  # 你的设备SOC，按需修改
          KERNEL_VERSION_NAME: 6.1.y_6.12.y  # 适配v24.10.2的内核版本
          WHOAMI: ophub

      ###########################################################################
      # 12. 上传镜像到GitHub Release
      ###########################################################################
      - name: 上传到Release
        if: ${{ steps.flippy.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' }}
        uses: ncipollo/release-action@main
        with:
          tag: ImmortalWRT_v24.10.2_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          artifacts: /opt/openwrt_packit/output/*.img
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## ImmortalWRT v24.10.2 固件（${{ env.DEVICE_NAME }}）
            编译时间：${{ env.FILE_DATE }}
            适配SOC：${{ env.PACKAGE_SOC }}
            内核版本：${{ env.KERNEL_VERSION_NAME }}
            
            ### 初始配置
            - 默认IP：192.168.1.1
            - 用户名：root
            - 密码：password（未修改则默认）
            
            ### 注意
            1. 确认设备SOC与${{ env.PACKAGE_SOC }}匹配
            2. 首次登录建议修改密码

      ###########################################################################
      # 13. 上传镜像到工作流Artifacts（临时下载）
      ###########################################################################
      - name: 上传到Artifacts
        if: ${{ steps.flippy.outputs.status == 'success' && env.UPLOAD_ARTIFACT == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ImmortalWRT_Firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: /opt/openwrt_packit/output/*.img
          retention-days: 7  # 保留7天

      ###########################################################################
      # 14. 清理资源（交换文件+临时目录+旧记录）
      ###########################################################################
      - name: 清理交换文件
        if: always()
        run: |
          if [ -f "${{ env.SWAP_FILE }}" ]; then
            sudo swapoff ${{ env.SWAP_FILE }}
            sudo rm -f ${{ env.SWAP_FILE }}
          fi

      - name: 清理临时目录
        if: always()
        run: |
          sudo rm -rf ${{ env.TEMP_DIR }}
          echo "=== 清理后磁盘空间 ===" && df -h

      - name: 删除旧工作流记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: 删除旧Release（保留最新3个）
        if: ${{ env.UPLOAD_RELEASE == 'true' && !cancelled() }}
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
