name: ImmortalWRT Build (修复 root 编译限制)

on:
  workflow_dispatch:
  push:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  ALL_THREADS: 2
  DOCKER_IMAGE: ubuntu:22.04
  SOURCE_DIR: ./

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: 1. 确认文件存在
        run: |
          ls -la $SOURCE_DIR/
          [ -f "$SOURCE_DIR/$CONFIG_FILE" ] || { echo "❌ 缺少 $CONFIG_FILE"; exit 1; }
          [ -f "$SOURCE_DIR/$DIY_P1_SH" ] || { echo "❌ 缺少 $DIY_P1_SH"; exit 1; }

      - name: 2. 准备编译目录
        run: |
          sudo mkdir -p /mnt/openwrt-build
          sudo chown -R runner:runner /mnt/openwrt-build
          cp $SOURCE_DIR/$CONFIG_FILE $SOURCE_DIR/$DIY_P1_SH $SOURCE_DIR/$DIY_P2_SH /mnt/openwrt-build/
          chmod +x /mnt/openwrt-build/$DIY_P1_SH /mnt/openwrt-build/$DIY_P2_SH
          ls -la /mnt/openwrt-build/

      - name: 3. 启动 Docker 容器
        run: |
          docker pull $DOCKER_IMAGE
          docker run -d --name openwrt-builder -v /mnt/openwrt-build:/build $DOCKER_IMAGE sleep infinity
          docker ps | grep -q "openwrt-builder" || { echo "❌ 容器启动失败"; exit 1; }

      - name: 4. 安装依赖
        run: |
          docker exec openwrt-builder bash -c "
            apt-get update -y && 
            DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata build-essential flex bison g++ gawk gcc swig git libncurses5-dev libssl-dev zlib1g-dev python3 python3-pip rsync unzip wget file && 
            apt-get clean
          " || { echo "❌ 依赖安装失败"; exit 1; }

      - name: 5. 生成并执行编译脚本
        run: |
          cat > /mnt/openwrt-build/run-build.sh <<EOS
          set -e
          cd /build
          git clone --depth 1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          mv /build/$CONFIG_FILE .config
          sed -i 's/\r$//' .config /build/$DIY_P1_SH /build/$DIY_P2_SH
          /build/$DIY_P1_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          /build/$DIY_P2_SH
          make defconfig
          make download -j"$ALL_THREADS"
          TARGET_COUNT=$(grep -cE '^CONFIG_TARGET_.+=y' .config)
          if [ "$TARGET_COUNT" -le 0 ]; then echo "❌ .config 未选择任何目标，请检查 .config"; exit 1; fi
          echo "📌 已选择的目标条目："
          grep -E '^CONFIG_TARGET_.+=y' .config || echo "⚠️ 未列出任何目标"
          FORCE_UNSAFE_CONFIGURE=1 make -j"$ALL_THREADS" || FORCE_UNSAFE_CONFIGURE=1 make -j1 V=s
          TARGET_DIR=$(find "$(pwd)/bin/targets" -mindepth 2 -maxdepth 2 -type d -print -quit 2>/dev/null)
          if [ -z "$TARGET_DIR" ]; then echo "❌ 未找到编译产物目录：$(pwd)/bin/targets/*/*"; exit 1; fi
          mkdir -p /build/firmware
          rsync -a --no-specials --no-devices --no-links --exclude=packages "$TARGET_DIR/" /build/firmware/
          chmod -R 755 /build/firmware
          EOS
          chmod +x /mnt/openwrt-build/run-build.sh
          docker exec openwrt-builder bash /build/run-build.sh || { echo "❌ 编译失败"; exit 1; }

      - name: 6. 打包 Armvirt（使用仓库内核）
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: /mnt/openwrt-build/firmware/*armvirt*rootfs*.tar.gz
          PACKAGE_SOC: s905d_s905x3_beikeyun
          KERNEL_SOURCE: local
          KERNEL_DIR: ${{ github.workspace }}/flippy_kernel

      - name: 6. 收集 Packit 产物
        run: |
          mkdir -p /mnt/openwrt-build/firmware/packit
          find "$GITHUB_WORKSPACE" -type f \( -name "*.img.gz" -o -name "*.img.xz" -o -name "*.zip" \) -print -exec cp {} /mnt/openwrt-build/firmware/packit/ \;
          echo "✅ 已收集 Packit 产物至 /mnt/openwrt-build/firmware/packit"
          ls -la /mnt/openwrt-build/firmware/packit

      - name: 7. 上传固件
        uses: actions/upload-artifact@main
        with:
          name: ImmortalWRT-Firmware
          path: /mnt/openwrt-build/firmware
          retention-days: 7

      - name: 8. 清理环境
        if: always()
        run: |
          docker stop openwrt-builder && docker rm openwrt-builder
          sudo rm -rf /mnt/openwrt-build